name: Generate Version
description: Task to generate custom version
outputs:
  version:
    value: ${{ steps.write-values.outputs.version }}
  branch:
    value: ${{ steps.write-values.outputs.branch }}
runs:
  using: 'composite'
  steps:
    - name: Get code
      uses: actions/checkout@v3
    - name: Get current version
      id: current-version
      run: |
        GET_VERSION=$(node -p -e "require('./package.json').version")
        echo "CURRENT_VERSION=${GET_VERSION}" >> $GITHUB_ENV
      shell: bash
    - name: Get branch name
      id: current-branch
      run: |
        FROM_BRANCH=${{ github.head_ref }}
        IFS='/' read -ra BRANCH_PARTS <<< "$FROM_BRANCH"
        echo "FROM_BRANCH=${BRANCH_PARTS[0]}" >> $GITHUB_ENV
      shell: bash
    - name: Generate new version
      run: |
        IFS='-' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        
        if [[ "${FROM_BRANCH}" == "feature" ]]; then
          echo "Tipo de rama: feature"
          echo "NEW_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
        
        elif [[ "${FROM_BRANCH}" == "release" ]]; then
          echo "Tipo de rama: release"
          echo "NEW_VERSION=${VERSION_PARTS[0]}-alpha" >> $GITHUB_ENV
        
        elif [[ "${FROM_BRANCH}" == "hotfix" ]]; then
          echo "Tipo de rama: hotfix"
          echo "NEW_VERSION=${VERSION_PARTS[0]}-patch" >> $GITHUB_ENV
        
        else
          echo "Tipo de rama: develop"
          echo "NEW_VERSION=${VERSION_PARTS[0]}" >> $GITHUB_ENV
        fi
      shell: bash
    - name: Write values
      id: write-values
      run: |
        BRANCH=${{ github.base_ref }}
        echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
        echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
      shell: bash
